
#if !DEBUGOUTPUT
  
#endif
          
          attention_buffer[attention_loop] = attention;                                    
          attention_loop = attention_loop + 1;
          if (attention_loop == 5)
          {
            average5_attention = (attention_buffer[0] + attention_buffer[1] + attention_buffer[2] + attention_buffer[3] + attention_buffer[4]) / 5;
            Serial.print("Average attention value is: ");
            Serial.print(average5_attention, DEC);
            Serial.print("\n");
            memset(attention_buffer, 0, sizeof(attention_buffer));
            attention_loop = 0;
            result = KNN(average5_attention, K_num);
            AllResult[allresult_count] = result;
            Serial.print("KNN: ");
            Serial.print(result);
            Serial.print("\n");
            allresult_count = allresult_count + 1;
          }

          if (allresult_count == Test_scope) {
            int result_length = (sizeof(AllResult) / sizeof(int));

            for (int i = 0; i < result_length; i++)
            {
              if (AllResult[i] == 2) {
                k = k + 1;
              }
              if (k >= floor(Test_scope*Threshold)) {
                vibration_result = 2;
              }
              else {
                vibration_result = 1;
              }
            }
            Serial.print("vibration_result: ");
            Serial.print(vibration_result);
            Serial.print("\n");
            allresult_count = 0;
            k = 0;
            vibration_result = 0;
            memset(AllResult, 0, sizeof(AllResult));
          }

        }
      }
    }
  }
}


#define K_num 9
double test = 0.0;


int KNN(double testData, int K) {
  double trainData[30] = {48.8928571428571, 50.7407407407407, 43.8928571428571, 52.2592592592593, 56.4814814814815,
                          45.1818181818182, 44.8636363636364, 44.1818181818182, 53.1739130434783, 53.3043478260870,
                          53.043478260869560, 50.727272727272730, 71.454545454545450, 39.857142857142854, 41.142857142857146,
                          38.130434782608695, 37.681818181818180, 40.363636363636370, 49.272727272727270, 38.272727272727270,
                          30.772727272727270, 33.750000000000000, 35.909090909090910, 44.045454545454550, 43.636363636363630,
                          28.629629629629630, 40.321428571428570, 32.107142857142854, 28.285714285714285, 33.607142857142854
                         };


  int rowNum = (sizeof(trainData) / sizeof(int));
  int Label_Emotion[rowNum] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}; //==============Need to be changed with trainData================//
  double Dist[30][2];
  int KClass[K_num] = {0};
  int countClass1 = 0;
  int countClass2 = 0;
  int result;


  double sum = 0.0;
  for (int i = 0; i < rowNum; i++) {
    sum = sum + (trainData[i] - testData) * (trainData[i] - testData);
    //      sum += (trainData[i][j] - testData[j])*(trainData[i][j] - testData[j]);
    Dist[i][0] = sqrt(sum);
    Dist[i][1] = Label_Emotion[i];
    sum = 0;
  }

  Sort(Dist, rowNum);

  for (int i = 0; i < K; i++) {
    KClass[i] = Dist[i][1];
    if (KClass[i] == 1) {
      countClass1++;
    } else {
      countClass2++;
    }
  }

  if (countClass1 == countClass2) {
    result = KClass[0];
  } else if (countClass1 > countClass2) {
    result = 1;
  } else {
    result = 2;
  }

  return result;
}

void Sort(double Distance[][2], int rowNum) {
  for (int i = 0; i < rowNum; i++)
  {
    for (int j = 0; j < rowNum - 1 - i; j++)
    {
      double t1;
      double t2;
      if (Distance[j][0] > Distance[j + 1][0])
      {
        t1 = Distance[j][0];
        Distance[j][0] = Distance[j + 1][0];
        Distance[j + 1][0] = t1;

        t2 = Distance[j][1];
        Distance[j][1] = Distance[j + 1][1];
        Distance[j + 1][1] = t2;
      }
    }
  }
}

      
//主循环
void loop()
{
  read_serial_data();//读取串口数据
}